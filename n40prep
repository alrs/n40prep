#!/usr/bin/env python2

import os
import subprocess
import re

BINARY_DEPENDENCIES = ["mdadm", "sgdisk", "pvcreate"]
FLASH_DRIVE = 'sde'
SPINNING_DRIVES = ['sda','sdb','sdc','sdd']
RAID_DEVICES = ["/dev/" + d + "1" for d in SPINNING_DRIVES]
RAID_HEX = "fd00"
LVM_HEX = "8e00"
RAID_PARTITION_GIGS = 16
ROOT_VOLUME_GIGS = 32
ROOT_VOLUME = "root"
SWAP_VOLUME = "os_swap_1"
SWAP_VOLUME_GIGS = 4
VOLUME_GROUP = "vg-os"

TEMPLATE_BUILD_RAID = "mdadm --create /dev/md0 -v --raid-devices=4 --level=raid10 {}"
TEMPLATE_CREATE_PARTITION = "sgdisk -n 1:{}:{} /dev/{} 2>&1 > /dev/null"
TEMPLATE_PART_TYPE = "sgdisk -t 1:{} /dev/{} 2>&1 > /dev/null"
TEMPLATE_STOP_RAID = "mdadm --stop /dev/{}"
TEMPLATE_CLEAR_DRIVE = "sgdisk -o {} 2>&1 > /dev/null"
TEMPLATE_ZAP_DRIVE = "sgdisk -z {} > /dev/null"
TEMPLATE_WHICH = "which {} 2>&1 > /dev/null"
TEMPLATE_FIRST_SECTOR = "sgdisk -F {}"
TEMPLATE_LAST_SECTOR = "sgdisk -E {}" 

CMD_CREATE_PV = "pvcreate /dev/md0p1"
CMD_DELETE_PARTITION = "sgdisk -d 1 /dev/md0"

class BinaryUnavailableError(Exception):
    pass

class FirstAvailableSectorError(Exception):
    pass

class LastAvailableSectorError(Exception):
    pass

class FormatFailedError(Exception):
    pass

class PartitionFailedError(Exception):
    pass

class LvmCreationError(Exception):
    pass

class LvmDeletionError(Exception):
    pass

class PartitionClearError(Exception):
    pass

class RaidCreationError(Exception):
    pass

class RaidStopError(Exception):
    pass

def binary_available(binary):
    if subprocess.call(TEMPLATE_WHICH.format(binary),shell=True) != 0:
        raise BinaryUnavailableError
    return True

def build_raid(devices):
    if subprocess.call(TEMPLATE_BUILD_RAID.format(' '.join(devices)),
                       shell=True) != 0:
        raise RaidCreationError
    return True

def build_pv():
    #FIXME get some exceptions all up in here
    if subprocess.call(CMD_BLANK_PARTITIONS, shell=True) != 0:
      raise LvmCreationError
    # THIS IS ALL BROKEN BECAUSE OF CHANGE TO TEMPLATE_FIRST_SECTOR
    # AND TEMPLATE_LAST_SECTOR
    first_sector = subprocess.check_output(CMD_GET_FIRST_SECTOR,
            shell=True).rstrip()
    last_sector = subprocess.check_output(CMD_GET_LAST_SECTOR,
            shell=True).rstrip()
    if subprocess.call(TEMPLATE_CREATE_PARTITION.format(first_sector,
            last_sector, "md0"),shell=True):
        raise LvmCreationError
    if subprocess.call(TEMPLATE_PART_TYPE.format(LVM_HEX,"md0"),shell=True) != 0:
        raise LvmCreationError
    if subprocess.call(CMD_CREATE_PV,shell=True) != 0:
        raise LvmCreationError

def device(drive):
    return (''.join(['/dev/',drive]))

def find_old_raids():
    devices = os.listdir('/dev/')    
    arrays = []
    pattern = re.compile("^md[0-9]$")
    for d in devices:
        if pattern.search(d):
            arrays.append(d)
    return arrays

def get_first_sector(device):
    output = subprocess.check_output(TEMPLATE_FIRST_SECTOR.format(device),
                                     shell=True).rstrip()
    if output.isdigit() == False:
        raise FirstAvailableSectorError

    return output

def get_last_sector(device):
    output = (subprocess.check_output(TEMPLATE_LAST_SECTOR.format(device),
              shell=True)).rstrip()

    if output.isdigit() == False:
        raise LastAvailableSectorError

    return output

def partition_drive(drive):
    # clearing the drive fails once, succeeds twice 
    subprocess.call(TEMPLATE_CLEAR_DRIVE.format(device(drive)),shell=True)
    if (subprocess.call(TEMPLATE_CLEAR_DRIVE.format(device(drive)),
        shell=True) != 0):
        raise PartitionClearError

    start_sector = get_first_sector(device(drive))
    partition_size = ''.join(["+",str(RAID_PARTITION_GIGS),"g"])

    command = []
    command.append(TEMPLATE_CREATE_PARTITION.format(start_sector, 
                   partition_size, drive))
    command.append(TEMPLATE_PART_TYPE.format(RAID_HEX, drive))
    
    for c in command:
        if subprocess.call(c, shell=True) != 0:
            raise PartitionFailedError

def stop_array(raid_array):
    if subprocess.call(TEMPLATE_STOP_RAID.format(raid_array),
                       shell=True) != 0:
        raise RaidStopError

def zero_superblock(partition):
    command = "mdadm --zero-superblock /dev/{}".format(partition)
    if subprocess.call(command,shell=True) != 0:
        raise RaidDeletionError

def main():
    for b in BINARY_DEPENDENCIES:
        binary_available(b)

    arrays = find_old_raids()
    if len(arrays) > 0:
        print("stopping existing raids.")
        for a in arrays:
            stop_existing_raid(a)
    print("partitioning drives")
    for d in SPINNING_DRIVES:
       print device(d)
       partition_drive(d) 
    print("building raid")
    build_raid(RAID_DEVICES)

main()
