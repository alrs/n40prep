#!/usr/bin/env python2

import os
import re
import subprocess

BINARY_DEPENDENCIES = ["mdadm", "sgdisk", "pvcreate", "pvmove",
                       "vgextend", "vgreduce", "lvextend", "swapon",
                       "swapoff", "mkswap"]
SPINNING_DRIVE_DEVICES = ['/dev/sda','/dev/sdb','/dev/sdc','/dev/sdd']
RAID_DEVICES = [d + "1" for d in SPINNING_DRIVE_DEVICES]
RAID_HEX = "fd00"
LVM_HEX = "8e00"
LVM_RAID_DEVICE = "/dev/md0"
LVM_VOLUME_DEVICE_SOURCE = "/dev/sde5"
LVM_VOLUME_DEVICE_TARGET = "/dev/md0p1"
RAID_PARTITION_GIGS = 16
ROOT_PARTITION_GIGS = 24
SWAP_PARTITION_GIGS = 2
ROOT_VOLUME = "root"
SWAP_VOLUME = "swap_1"
VOLUME_GROUP = "vg-os"

TEMPLATE_BUILD_RAID = "mdadm --create {} -v --raid-devices={} --level=raid{} {}"
TEMPLATE_CREATE_PARTITION = "sgdisk -n {}:{}:{} {} 2>&1 > /dev/null"
TEMPLATE_PART_TYPE = "sgdisk -t {}:{} {} 2>&1 > /dev/null"
TEMPLATE_STOP_RAID = "mdadm --stop {}"
TEMPLATE_CLEAR_DRIVE = "sgdisk -o {} 2>&1 > /dev/null"
TEMPLATE_ZAP_DRIVE = "sgdisk -z {} > /dev/null"
TEMPLATE_WHICH = "which {} 2>&1 > /dev/null"
TEMPLATE_FIRST_SECTOR = "sgdisk -F {}"
TEMPLATE_LAST_SECTOR = "sgdisk -E {}" 
TEMPLATE_CREATE_PV = "pvcreate {}"
TEMPLATE_VGEXTEND = "vgextend {} {}"
TEMPLATE_PVMOVE = "pvmove {}"
TEMPLATE_VGREDUCE = "vgreduce {} {}"
TEMPLATE_LVEXTEND = "lvextend -L{}GB {}"
TEMPLATE_RESIZE2FS = "resize2fs {}"
TEMPLATE_SWAPON = "swapon {}"
TEMPLATE_SWAPOFF = "swapoff {}"
TEMPLATE_MKSWAP = "mkswap {}"

class BinaryUnavailableError(Exception):
    pass

class ExtendVolumeError(Exception):
    pass

class ExtendVolumeGroupError(Exception):
    pass

class FirstAvailableSectorError(Exception):
    pass

class LastAvailableSectorError(Exception):
    pass

class MovePhysicalVolumeError(Exception):
    pass

class FormatFailedError(Exception):
    pass

class PartitionFailedError(Exception):
    pass

class LvmCreationError(Exception):
    pass

class LvmDeletionError(Exception):
    pass

class MkswapError(Exception):
    pass

class PartitionClearError(Exception):
    pass

class RaidCreationError(Exception):
    pass

class RaidStopError(Exception):
    pass

class ResizeFilesystemError(Exception):
    pass

class SwaponError(Exception):
    pass

class SwapoffError(Exception):
    pass

class VolumeGroupReduceError(Exception):
    pass

def binary_available(binary):
    if subprocess.call(TEMPLATE_WHICH.format(binary),shell=True) != 0:
        raise BinaryUnavailableError
    return True

def build_raid(**kwargs):
    device = kwargs['device']
    members = kwargs['members']
    count = len(members)
    level = str(kwargs['level']) 
    dev_list = ' '.join(members)

    if subprocess.call(TEMPLATE_BUILD_RAID.format(device, count, level, 
                                                  dev_list),
                       shell=True) != 0:
        raise RaidCreationError
    return True

def build_pv(device):
    if subprocess.call(TEMPLATE_CREATE_PV.format(device),
                       shell=True) != 0:
        raise LvmCreationError

def clear_device(device):
    # clearing the drive fails once, succeeds twice 
    subprocess.call(TEMPLATE_CLEAR_DRIVE.format(device),shell=True)
    if subprocess.call(TEMPLATE_CLEAR_DRIVE.format(device),shell=True) != 0:
        raise PartitionClearError

    return True

def extend_lv(volume, size):
    gigs = str(size)
    if subprocess.call(TEMPLATE_LVEXTEND.format(gigs, volume), 
                       shell=True) != 0:
        raise ExtendVolumeError
    return True

def extend_vg(volume,target_device):
    if subprocess.call(TEMPLATE_VGEXTEND.format(volume, target_device),
                       shell=True) != 0:
        raise ExtendVolumeGroupError
    return True

def find_old_raids():
    devices = os.listdir('/dev/')    
    arrays = []
    pattern = re.compile("^md[0-9]$")
    for d in devices:
        if pattern.search(d):
            arrays.append(d)
    return arrays

def get_first_sector(device):
    output = subprocess.check_output(TEMPLATE_FIRST_SECTOR.format(device),
                                     shell=True).rstrip()
    if output.isdigit() == False:
        raise FirstAvailableSectorError

    return output

def get_last_sector(device):
    output = (subprocess.check_output(TEMPLATE_LAST_SECTOR.format(device),
              shell=True)).rstrip()

    if output.isdigit() == False:
        raise LastAvailableSectorError

    return output

def mkswap(device):
    if subprocess.call(TEMPLATE_MKSWAP.format(device),shell=True) != 0:
        raise MkswapError
    return True

def move_pv(device):
    if (subprocess.call(TEMPLATE_PVMOVE.format(device),shell=True) != 0):
        raise MovePhysicalVolumeError 
    return True

def partition_device(**kwargs):
    start = kwargs['start']
    stop = kwargs['stop']
    num = str(kwargs['num'])
    part_type = kwargs['part_type']
    device = kwargs['device']

    subprocess.call(TEMPLATE_CREATE_PARTITION.format(
                    num, start, stop, device), shell=True)
    if (subprocess.call((TEMPLATE_PART_TYPE.format(num, part_type, device)),
        shell=True)) != 0:
        raise PartitionFailedError
    return True

def reduce_vg(group, device):
    if subprocess.call(TEMPLATE_VGREDUCE.format(group,device),
        shell=True) != 0:
        raise VolumeGroupReduceError
    return True

def resize_fs(device):
    if subprocess.call(TEMPLATE_RESIZE2FS.format(device),
        shell=True) != 0:
        raise ResizeFilsystemError
    return True

def stop_array(raid_array):
    if subprocess.call(TEMPLATE_STOP_RAID.format(raid_array),
                       shell=True) != 0:
        raise RaidStopError

def swapoff(device):
    print TEMPLATE_SWAPOFF.format(device)
    if subprocess.call(TEMPLATE_SWAPOFF.format(device),shell=True) != 0:
        raise SwapoffError
    return True

def swapon(device):
    if subprocess.call(TEMPLATE_SWAPON.format(device),shell=True) != 0:
        raise SwaponError
    return True

def main():
    for b in BINARY_DEPENDENCIES:
        binary_available(b)

    arrays = find_old_raids()
    if len(arrays) > 0:
        print("stopping existing RAID arrays.")
        for a in arrays:
            stop_existing_raid(a)
    
    print("clearing partitions")
    for d in SPINNING_DRIVE_DEVICES:
        print(d)
        clear_device(d)

    raid_size = str(RAID_PARTITION_GIGS) + "G"
    print("partitioning drives for RAID")
    for d in SPINNING_DRIVE_DEVICES:
       print(d)
       partition_device(num=1, start=get_first_sector(d), stop=raid_size,
                        part_type=RAID_HEX, device=d) 

    print("building RAID")
    build_raid(device=LVM_RAID_DEVICE,members=RAID_DEVICES,level=10)

    print("clearing RAID")
    clear_device(LVM_RAID_DEVICE)

    print("partitioning RAID for LVM")
    partition_device(device=LVM_RAID_DEVICE, part_type=LVM_HEX,
                     start=get_first_sector(LVM_RAID_DEVICE),
                     stop=get_last_sector(LVM_RAID_DEVICE),
                     num=1)

    print("building physical LVM volume")
    build_pv(LVM_VOLUME_DEVICE_TARGET)

    print("extending existing volume group")
    extend_vg(VOLUME_GROUP,LVM_VOLUME_DEVICE_TARGET)

    print("moving volume group to target")
    move_pv(LVM_VOLUME_DEVICE_SOURCE)

    print("removing installation flash device from volume group")
    reduce_vg(VOLUME_GROUP, LVM_VOLUME_DEVICE_SOURCE)
    
    root_partition = os.path.join('/dev',VOLUME_GROUP,ROOT_VOLUME)
    print("resizing root partition: " + root_partition)
    extend_lv(root_partition, ROOT_PARTITION_GIGS)

    print("resizing root filesystem: " + root_partition)
    resize_fs(root_partition)

    swap_partition = os.path.join('/dev', VOLUME_GROUP, SWAP_VOLUME)
    print("swapoff: " + swap_partition)
    swapoff(swap_partition)

    print("resizing swap: " + swap_partition)
    extend_lv(swap_partition, SWAP_PARTITION_GIGS)

    print("rebuilding swap: " + swap_partition)
    mkswap(swap_partition)

    print("swapon: " + swap_partition)
    swapon(swap_partition)
    

main()
